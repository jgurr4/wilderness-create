#!/bin/bash
# Usage: simply specify the type of node being created and a list of key-value pairs for each property you want it to have.
# Example: add-node Task name 'filter clay from soil' recommended 'true'
# TODO: Figure out how to make this add relationship at same time as it creates the node
# TODO: Make it so I don't have to list the keys, I can just list the values, once I've decided what will always be the right keys and values
set -x
json="{\"statements\": [{\"statement\": \"CREATE (t:$1 {"
i=1
kind=$1
name=$3
separator=""
for v in "$@" 
do
  if [[ $v == $1 ]]; then
    continue
  fi
  if [[ $((i % 2)) == 0 ]]; then
    json="$json\\\"$v\\\""
    separator=", "
    i=$((i+1))
    continue
  fi
  i=$((i+1))
  json="$json$separator$v: "
  separator=""
done
json="$json})\"}]}"
echo $json


# Relationships:
read -p "Tell the relationship (RELATIONSHIP_TO Material 'some_name' RELATIONSHIP_TO Tech 'some-name' ...): " relationship
arr=($relationship)
i=0
length=${#arr[@]}
while [[ $i < $((length - 2)) ]]; do
# jennifer:Person {name: 'Jennifer'}
#  CREATE (jennifer)-[rel:IS_FRIENDS_WITH]->(mark)
  relation=${arr[$i]}
  relationKind=${arr[$((i+1))]}
  relationName=${arr[$((i+2))]}
  relations="CREATE (:$kind {name: $name})-[rel:$relation]->(:$relationKind {name: $relationName})"
  i=$((i+3))
done

echo $relations
echo
echo -e "$json\n$relations"

# Executing curl command
#eval curl -i -H \'Content-Type: application/json\'  \
#-u neo4j:bigmac \
#http://localhost:7474/db/data/transaction/commit \
#-d "'$json'"















# This Worked!!!
#echo "{\"statements\": [{\"statement\": \"CREATE (t:$1 {$2: '$3', $4: '$5'})\"}]}"

#curl -i -H 'Content-Type: application/json'  \
#-u neo4j:bigmac \
#http://localhost:7474/db/data/transaction/commit \
#-d '{"statements": [{"statement": "CREATE (t:Task {name: \"filter clay from soil\", recommended: \"true\"})"}]}'

# Past failed attempts:
# This is how to start a transaction:  -u = user:password
# curl -vsk -X POST --header 'Content-Type: application/json' -u neo4j:bigmac "http://localhost:7474/db/neo4j/tx"
# curl -vsk -X POST --header 'Content-Type: application/json' -u neo4j:bigmac "http://localhost:7474/db/neo4j/tx" --data ' { "statements": [ { "statement": "CREATE (n 'Filter clay from soil') RETURN n", "parameters": { "props": { "recommended": "true" "name": "filter clay from soil" " } } }, ] }'

# curl -vsk -X POST --header 'Content-Type: application/json' -u neo4j:bigmac "http://localhost:7474/db/neo4j/tx/commit" --data 
# ' { "statements": 
# [ 
# { "statement": "CREATE (t:Task 'Filter clay from soil') RETURN t", "parameters": 
#   { "props": 
#     { "recommended": "true" "name": "filter clay from soil" " 
#     } 
#     } 
#   }, 
#   ] 
# }'
# 
# curl -vsk -X POST --header 'Content-Type: application/json' -u neo4j:bigmac "http://localhost:7474/db/neo4j/tx/commit" --data '{"name":"filter clay from soil","recommended":"true"}'
# 
